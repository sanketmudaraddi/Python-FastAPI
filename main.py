# main.py
from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy.orm import Session
from database import SessionLocal, engine, Task

app = FastAPI()

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Create Endpoint
@app.post("/tasks/", response_model=dict)
async def create_task(task: dict, db: Session = Depends(get_db)):
    """
    Create a new task.

    :param task: Task details (excluding id, which is autogenerated).
    :param db: Database session dependency.
    :return: Created task details.
    """
    new_task = Task(**task)
    db.add(new_task)
    db.commit()
    db.refresh(new_task)
    return new_task

# Read Endpoint
@app.get("/tasks/{task_id}", response_model=dict)
async def read_task(task_id: int, db: Session = Depends(get_db)):
    """
    Retrieve a task by its id.

    :param task_id: Task ID.
    :param db: Database session dependency.
    :return: Task details in JSON format.
    """
    task = db.query(Task).filter(Task.id == task_id).first()
    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")
    return task

# Update Endpoint
@app.put("/tasks/{task_id}", response_model=dict)
async def update_task(task_id: int, updated_task: dict, db: Session = Depends(get_db)):
    """
    Update an existing task by its id.

    :param task_id: Task ID.
    :param updated_task: Updated task details (excluding id).
    :param db: Database session dependency.
    :return: Updated task details.
    """
    task = db.query(Task).filter(Task.id == task_id).first()
    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")

    for key, value in updated_task.items():
        setattr(task, key, value)

    db.commit()
    db.refresh(task)
    return task

# Delete Endpoint
@app.delete("/tasks/{task_id}", response_model=dict)
async def delete_task(task_id: int, db: Session = Depends(get_db)):
    """
    Delete a task by its id.

    :param task_id: Task ID.
    :param db: Database session dependency.
    :return: JSON response indicating success.
    """
    task = db.query(Task).filter(Task.id == task_id).first()
    if task is None:
        raise HTTPException(status_code=404, detail="Task not found")

    db.delete(task)
    db.commit()

    return {"message": "Task deleted successfully"}

